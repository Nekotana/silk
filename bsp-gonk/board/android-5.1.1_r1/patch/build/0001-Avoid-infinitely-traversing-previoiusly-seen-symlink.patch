From 37f3a0a67a617ae23fc4e251ef2d8758b79966d6 Mon Sep 17 00:00:00 2001
From: James Lal <james@silklabs.com>
Date: Fri, 27 May 2016 10:31:05 -0700
Subject: [PATCH] Avoid infinitely traversing previoiusly seen symlinks

---
 tools/findleaves.py | 47 ++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 46 insertions(+), 1 deletion(-)

diff --git a/tools/findleaves.py b/tools/findleaves.py
index 3a9e508..7514f0b 100755
--- a/tools/findleaves.py
+++ b/tools/findleaves.py
@@ -22,13 +22,58 @@
 
 import os
 import sys
+import errno
+
+def symlinkSafeWalk(top, topdown=True, onerror=None, followlinks=False, seen=set()):
+    islink, join, isdir = os.path.islink, os.path.join, os.path.isdir
+
+    # We may not have read permission for top, in which case we can't
+    # get a list of the files the directory contains.  os.path.walk
+    # always suppressed the exception then, rather than blow up for a
+    # minor reason when (say) a thousand readable directories are still
+    # left to visit.  That logic is copied here.
+    try:
+        # Note that listdir and error are globals in this module due
+        # to earlier import-*.
+        names = os.listdir(top)
+    except os.error, err:
+        if onerror is not None:
+            onerror(err)
+        return
+
+    dirs, nondirs = [], []
+    for name in names:
+        if isdir(join(top, name)):
+            dirs.append(name)
+        else:
+            nondirs.append(name)
+
+    if topdown:
+        yield top, dirs, nondirs
+    for name in dirs:
+        new_path = join(top, name)
+        path_is_link = islink(new_path)
+
+        if path_is_link:
+            path_real_loc = os.path.realpath(new_path)
+            if path_real_loc in seen:
+                continue
+            else:
+                seen.add(path_real_loc)
+
+        if followlinks or not path_is_link:
+            for x in symlinkSafeWalk(new_path, topdown, onerror, followlinks):
+                yield x
+    if not topdown:
+        yield top, dirs, nondirs
+
 
 def perform_find(mindepth, prune, dirlist, filename):
   result = []
   pruneleaves = set(map(lambda x: os.path.split(x)[1], prune))
   for rootdir in dirlist:
     rootdepth = rootdir.count("/")
-    for root, dirs, files in os.walk(rootdir, followlinks=True):
+    for root, dirs, files in symlinkSafeWalk(rootdir, followlinks=True):
       # prune
       check_prune = False
       for d in dirs:
-- 
2.7.3

